@{
    ViewData["Title"] = "CAU Paras submitted to Branches";
    Layout = "_Layout";
}
<head>
    <style type="text/css">
        .evidence-link {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .evidence-icon {
            margin-right: 10px;
        }
    </style>

</head>
<script type="text/javascript">
    var g_newParaId = 0;
    var g_comId = 0;
    var g_oldParaId = 0;
    var g_paraTextId = 0;
    var fileInput = null;
    var g_allAttachedImages = [];
    var g_allowedFormats = ["pdf", "jpg", "jpeg", "png", "doc", "docx", "jpg", "csv", "xls", "xlsx"]; // allowed file formats


    var btnClick = "own";
    var g_allowLimit = '12'; // Maximum file size in MB

    $(document).ready(function () {
        getOwnParasForCompliance();
        $('#branch_reply_to_cau_field').richText({
            imageUpload: false,
            fileUpload: false,
            videoEmbed: false,
            urls: false
        });

        $("aks-file-upload").aksFileUpload({
            fileUpload: "#aksfileupload", // With target [input]file or [type]json you can save the data of loaded items
            fileType: ["pdf", "zip", "jpg", "jpeg", "png", "doc", "docx", "csv", "xls", "xlsx"], // Allowed file formats
            dragDrop: false, // Enable drag & drop upload
            maxSize: g_allowLimit + " MB", // Maximum uploaded file size
            multiple: true, // Allow multiple file uploads
            maxFile: 100, // Maximum number of uploaded files
            maxFileError: "File exceeds upload limit. - Max limit:", // Error message for exceeding file count
            maxSizeError: "File exceeds size. - Max limit:", // Error message for exceeding file size
            fileTypeError: "Disallowed file format.", // Error message for disallowed file format
            label: "Select your files and wait until they appear below", // Label text for the file input

        });
        var fileInput = document.getElementById('aksfileupload');
        fileInput.addEventListener('change', function () {
            if (this.files.length > 0) {
                $("#wait").css("display", "block"); // Show loader
                processFiles(this.files).finally(() => {
                    $("#wait").css("display", "none"); // Hide loader
                });
            } else {
                $("#wait").css("display", "none"); // Hide loader if no files
            }
        });
        async function processFiles(files) {
            const formData = new FormData();
            formData.append('subfolder', g_comId);

            // Convert MB to bytes
            const maxSizeInBytes = parseInt(g_allowLimit) * 1024 * 1024;
            let hasFiles = false; // Flag to check if any valid files were added

            Array.from(files).forEach((file, index) => {
                if (file.size <= maxSizeInBytes) {
                    formData.append('files', file);
                    hasFiles = true; // Set flag to true if a file is valid
                }
            });

            // Call uploadFiles only if there are valid files
            if (hasFiles) {
                uploadFiles(formData);
            }
        }

        async function uploadFiles(formData) {
            try {
                const response = await $.ajax({
                    url: g_asiBaseURL + "/UploadFile/UploadFilesCAU",
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false
                });
                alert("Files uploaded successfully!");

                $(".aks-file-upload .aks-file-upload-delete").on("click", function (e) {
                    var filename = $(this).attr("data-delete");
                    deleteFileFromServer(filename);
                });

            } catch (error) {
                console.error("Error uploading files:", error);
                alert("Error uploading files. Please try again."); // Use custom alert
            }
        }

    });
    function getOwnParasForCompliance() {
          destroyDatatable("manageObsPanel");
        $.ajax({
            url: g_asiBaseURL + "/ApiCalls/get_cau_paras_for_compliance_submitted_to_branch",
            type: "POST",
            data: {

            },
            cache: false,
            success: function (data) {
                g_obsList = data;

                $.each(data, function (index, child) {

                    $('#manageObsPanel tbody').append('<tr id="div_' + child.id + '"><td>' + ++index + '</td><td><p class="fw-normal mb-1">' + child.audiT_PERIOD + '</p></td><td><p class="fw-normal mb-1">' + child.parA_NO + '</p></td><td><p class="fw-normal mb-1">' + child.gisT_OF_PARAS + '</p></td><td><p class="fw-normal mb-1">' + child.caU_NAME + '</p></td><td><p class="fw-normal mb-1">' + child.caU_INSTRUCTIONS + '</p></td><td class="text-center"><a href="#" onclick="event.preventDefault();viewParaDetails(' + child.neW_PARA_ID + ',' + child.olD_PARA_ID + ',\'' + child.coM_ID + '\',\'' + child.indicator + '\',\'' + child.parA_NO + '\' );" class="text-hover text-danger mr-5px"><small>Reply</small></a></td></tr>');
                });
                   initializeDataTable("manageObsPanel");
            },

            dataType: "json",
        });
    }
    function viewParaDetails(newParaId = 0, oldParaId = 0, comID, indicator, paraNo) {

        g_newParaId = newParaId;
        g_oldParaId = oldParaId;
        g_comId = comID;
        g_indicator = indicator;
        $('#viewParaComplianceModel').modal('show');
        $('#viewParaNoModelField').val(paraNo);
        $.ajax({
            url: g_asiBaseURL + "/ApiCalls/get_cau_para_to_branch_para_text",
            type: "POST",
            data: {
                'COM_ID': comID,
                'INDICATOR': indicator
            },
            cache: false,
            success: function (data) {
                g_paraTextId = data.texT_ID;
                $('#viewParaTextModelField').html(data.memO_TXT);
                $('#branchReplyAgainstCAUIns').html(data.brancH_REPLY);
                $('#cauInstructionToBranch').val(data.caU_INSTRUCTION);
                $('#complianceCycleEvidences').empty();
                if (data.brancH_REPLY != "") {
                    $.ajax({
                        url: g_asiBaseURL + "/ApiCalls/get_cau_paras_evidences_for_compliance_for_review",
                        type: "POST",
                        data: {
                            'TEXT_ID': g_paraTextId
                        },
                        cache: false,
                        success: function (data) {
                            if (data.length > 0) {

                                $.each(data, function (j, pp) {
                                    var extension = pp.imagE_NAME.split('.').pop().toLowerCase();
                                    const contentType = getContentType(extension);

                                    // Create and append the attachment item
                                    const container = document.createElement('div');
                                    container.className = 'evidence-link';

                                    // Add icon
                                    const icon = document.createElement('i');
                                    icon.className = getIconClass(extension) + ' evidence-icon';
                                    container.appendChild(icon);

                                    // Add label
                                    const label = document.createElement('span');
                                    label.innerText = pp.imagE_NAME;
                                    label.classList.add('text-primary');

                                    // Add cursor style to make it look like a link
                                    label.style.cursor = 'pointer';
                                    container.appendChild(label);

                                    // Add click event to download file on selection
                                    container.addEventListener('click', function () {
                                        downloadFile(pp.filE_ID);
                                    });

                                    $('#complianceCycleEvidences').append(container);
                                });
                            } else {
                                $('#complianceCycleEvidences').append("<i>No evidence is attached </i>");
                            }
                        },
                        dataType: "json",
                    });
                }
                else {
                    $('#branchReplyAgainstCAUIns').parent().remove();
                    $('#complianceCycleEvidences').parent().remove();
                }

            },
            dataType: "json",
        });
  
        }
    function reloadLocation() {
        $('#viewParaComplianceModel').modal('hide');
        window.location.reload();
    }
    function CAUSubmitParaByBranch() {

        if ($('.richText-editor').html() == "") {
            alert("Please provide Commments to proceed");
            return;
        }
        complianceRemarks = $('.richText-editor').html();


        $('#submitCAUParaResponseHandler').attr("disabled", true);
        $.ajax({
            url: g_asiBaseURL + "/ApiCalls/submit_cau_para_by_branch",
            type: "POST",
            data: {
                'COM_ID': g_comId,
                'TEXT_ID': g_paraTextId,
                'BR_COMMENTS': complianceRemarks
            },
            cache: false,
            success: function (data) {
                alert(data.Message);
                $('#submitCAUParaResponseHandler').attr("disabled", false);
                onAlertCallback(reloadLocation);
            }, error: function (jqXHR, textStatus, errorThrown) {
                $('#submitCAUParaResponseHandler').attr("disabled", false);
                alert("An error occurred: " + jqXHR.status + " " + errorThrown);
            },
            dataType: "json",
        });
    }

    function getFileExtension(file) {
        var fileName = file.name;
        var extension = fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase();
        return extension;
    }
    function getIconClass(extension) {
        switch (extension) {
            case 'pdf': return 'fa fa-file-pdf';
            case 'zip': return 'fa fa-file-archive';
            case 'png':
            case 'jpg':
            case 'jpeg':
            case 'bmp': return 'fa fa-file-image';
            case 'doc':
            case 'docx': return 'fa fa-file-word';
            default: return 'fa fa-file';
        }
    }
    function getContentType(extension) {
        switch (extension) {
            case 'pdf': return 'application/pdf';
            case 'zip': return 'application/zip';
            case 'png': return 'image/png';
            case 'doc': return 'application/msword';
            case 'docx': return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
            default: return 'application/octet-stream';
        }
    }
    function generateUniqueTimestamp() {
        var date = new Date();
        var year = date.getFullYear();
        var month = ('0' + (date.getMonth() + 1)).slice(-2);
        var day = ('0' + date.getDate()).slice(-2);
        var hours = ('0' + date.getHours()).slice(-2);
        var minutes = ('0' + date.getMinutes()).slice(-2);
        var seconds = ('0' + date.getSeconds()).slice(-2);
        var milliseconds = ('00' + date.getMilliseconds()).slice(-3);

        var timestamp = year + month + day + '_' + hours + minutes + seconds + milliseconds;
        return timestamp;
    }
    function base64ToBlob(base64, contentType) {
        const byteCharacters = atob(base64);
        const byteArrays = [];

        for (let offset = 0; offset < byteCharacters.length; offset += 512) {
            const slice = byteCharacters.slice(offset, offset + 512);

            const byteNumbers = new Array(slice.length);
            for (let i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }

            const byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }

        const blob = new Blob(byteArrays, { type: contentType });
        return blob;
    }
    function deleteFileFromServer(fileName) {

        if (fileName != null || fileName != "" || typeof fileName != "undefined") {
            $.ajax({
                url: g_asiBaseURL + "/UploadFile/DeleteFileCAU",
                type: "POST",
                data: {
                    'fileName': fileName,
                    'subFolder': g_comId
                },
                cache: false,
                success: function (data) {


                },

                dataType: "json",
            });
        }

    }
    function clearEvidencesLog() {
        $('.aks-file-upload-delete').click();
        $('.aks-file-upload-error').remove();
        document.getElementById('aksfileupload').value = '';
    }
    function downloadFile(id) {
        $.ajax({
            url: g_asiBaseURL + "/ApiCalls/get_cau_paras_post_compliance_evidence_data",
            type: "POST",
            data: {
                'FILE_ID': id,
            },
            cache: false,
            success: function (data) {
                var extension = data.imagE_NAME.split('.').pop().toLowerCase();
                const contentType = getContentType(extension);

                const blob = base64ToBlob(data.imagE_DATA, contentType);
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = data.imagE_NAME;
                link.click(); // Trigger the download

            },
            dataType: "json",
        });


    }
</script>


<div class="row">
    <div id="ownCompliancePanel" class="row col-md-12 mt-3">
        <h3 style=" display:block;color: #45c545;">LIST OF CAU OUTSTANADING PARAS SUBMITTED TO @ViewData["UserEntityName"] BRANCH </h3>
        <table id="manageObsPanel" class="display">
            <thead style="background-color: rgb(181 229 117 / 93%) !important; ">
                <tr>
                    <th class="col-md-auto">Sr No.</th>
                    <th class="col-md-auto">Audit Period</th>
                    <th class="col-md-auto">Para No.</th>
                    <th class="col-md-auto">Title / Gist</th>
                    <th class="col-md-auto">CAU Unit</th>
                    <th class="col-md-auto">CAU Instructions</th>
                    <th class="col-md-auto hide-export">Action</th>
                </tr>
            </thead>
            <tbody></tbody>

        </table>
    </div>
</div>

<div id="viewParaComplianceModel" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-xl" role="document" style="min-width:95% !important;">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Para Submission to Branch</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="viewParaNoModelField">Para Number</label>
                        <input id="viewParaNoModelField" class="form-control" disabled="disabled" />
                    </div>
                    <div class="form-group">
                        <label for="viewParaTextModelField">Para Text</label>
                        <div id="viewParaTextModelField" disabled="disabled" class="form-control container-clob"></div>
                    </div>
                    <div class="form-group">
                        <label for="controlingsearch">CAU Previous Instructions</label>
                        <textarea id="cauInstructionToBranch" class="form-control" rows="3"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="branchReplyAgainstCAUIns">Branch Previous Reply</label>
                        <div id="branchReplyAgainstCAUIns" disabled="disabled" class="form-control container-clob"></div>
                    </div>
                    <div class="form-group mt-3">
                        <label for="complianceCycleEvidences">Evidence</label>
                        <div class="row col-md-12 mt-3 mb-3">
                            <div id="complianceCycleEvidences">
                            </div>
                        </div>
                    </div>
                    <div class="form-group mt-3">
                        <label for="branch_reply_to_cau_field">Branch Reply</label>
                        <textarea class="form-control" id="branch_reply_to_cau_field"></textarea>
                    </div>

                    <div id="evidenceUploader" class="input-field">
                        <label class="active">Evidences</label>
                        <div class="row-col-md-12 mt-1">
                            <p class="text-danger text-italic"> The maximum file size limit is 10MB. </p>
                        </div>
                        <aks-file-upload></aks-file-upload>

                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button id="submitCAUParaResponseHandler" onclick="CAUSubmitParaByBranch();" type="button" class="btn btn-danger">Submit</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
